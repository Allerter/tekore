.. _advanced-usage:

Advanced usage
==============
Working with access tokens
--------------------------
Access tokens can be retrieved from the Spotify authentication servers
either for a client application or for a user of that application.
Each of these methods results in an expiring bearer token,
which is used to authenticate requests to the Web API itself.
Additionally, a user token has a refresh token associated with it.
This refresh token is valid until the user manually revokes it from Spotify
and is used to request for new tokens as the old ones expire.

Two types of token objects are generated by Spotipy.
The :ref:`auth <module-auth>` module parses tokens into ordinary objects.
These tokens expire and their bearer tokens are invalid after expiration.
The :ref:`util <module-util>` module parses tokens into refreshing tokens,
which appear to never expire due to being automatically refreshed.

Providing tokens
****************
The client provides two ways of authenticating requests.
Firstly an access token is accepted in the client's constructor.

.. code:: python

   s = Spotify(token)
   a = s.artist(artist_id)

Secondly, the client can temporarily use another token for requests.
This is particularly handy if only one client instance is created but there are
many users, several tokens are associated with a single user perhaps due to
different scopes, or tokens are manually refreshed.

.. code:: python

   s = Spotify(app_token)
   a = s.artist(artist_id)

   with s.token_as(user_token):
       user = s.current_user()

Retrieving user tokens
**********************
``util.prompt_for_user_token`` provides a convenient way of retrieving
an access token that refreshes automatically when about to expire.
However, it is intended for local use as it opens up a browser window.
For situations involving a server, a two-step process should be implemented.

- Redirect a user to a specific URL
- Receive an access token as a result of the authentication

The steps are covered by ``user_authorisation_url`` and ``request_user_token``,
two methods of the :class:`Credentials` class in the :ref:`auth <module-auth>` module.
See this recipe on an :ref:`auth-server` for an example implementation.
The same process can be implemented with the :ref:`util <module-util>` module
using :class:`RefreshingCredentials`.

Token persistence
*****************
A refresh token is enough to request new user access tokens.
They also have the advantage of never expiring,
so they are a perfect candidate to save to a file or a database.
Whether you are using :ref:`auth <module-auth>` or :ref:`util <module-util>`,
the refresh tokens can later be used to retrieve user access tokens.

Configuration with environment variables
----------------------------------------
Should you want to use environment variables to provide application credentials,
a function for reading those values is provided in the :ref:`util <module-util>` module.

.. code:: python

   from spotipy.util import credentials_from_environment
   client_id, client_secret, redirect_uri = credentials_from_environment()

Those values can then be used to retrieve access tokens.
Note that if all configuration values are defined,
it is possible to use unpacking to provide the configuration.

.. code:: python

   from spotipy import util

   cred = util.credentials_from_environment()
   token = util.prompt_for_user_token(*cred)

.. _advanced-senders:

Senders
-------
By default Spotipy doesn't do anything clever to requests that are sent.
Its functionality, however, can be extended in a number of ways
using different kinds of :ref:`senders <module-sender>`.
They provide the
`advantages <https://2.python-requests.org/en/master/user/advanced/#session-objects>`_
of using sessions and can bring new functionality.
For example:

.. code:: python

   from spotipy import Spotify
   from spotipy.sender import PersistentSender

   Spotify(sender=PersistentSender())

.. _advanced-caching:

Caching
-------
The Spotify Web API returns headers for caching requests.
See the Web API
`overview <https://developer.spotify.com/documentation/web-api/>`_
for further information.
Spotipy does not implement response caching,
but `Senders`_ can be subclassed for arbitrary extension.
For example the
`CacheControl <https://pypi.org/project/CacheControl/>`_
library provides caching algorithms that also wrap around :class:`Session`.

Traversing paging objects
-------------------------
Many Web API endpoints that would return a large number of the same
type of object return paging objects for performance reasons.
The :ref:`client <client-base>` defines a number of ways to navigate these pagings.
Next and previous pages can be requested one at a time.

.. code:: python

    tracks = spotify.playlist_tracks('37i9dQZEVXbMDoHDwVN2tF', limit=10)
    t_next = spotify.next(tracks)
    t_prev = spotify.previous(t_next)

To retrieve the whole content additional methods are available.

.. code:: python

    pages = spotify.all_pages(tracks)
    items = spotify.all_items(tracks)
